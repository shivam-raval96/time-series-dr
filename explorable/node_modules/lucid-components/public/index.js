function noop() {}

function assign(target) {
	var k,
		source,
		i = 1,
		len = arguments.length;
	for (; i < len; i++) {
		source = arguments[i];
		for (k in source) target[k] = source[k];
	}

	return target;
}

function insertNode(node, target, anchor) {
	target.insertBefore(node, anchor);
}

function detachNode(node) {
	node.parentNode.removeChild(node);
}

function createElement(name) {
	return document.createElement(name);
}

function blankObject() {
	return Object.create(null);
}

function destroy(detach) {
	this.destroy = noop;
	this.fire('destroy');
	this.set = this.get = noop;

	if (detach !== false) this._fragment.u();
	this._fragment.d();
	this._fragment = this._state = null;
}

function _differs(a, b) {
	return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function dispatchObservers(component, group, changed, newState, oldState) {
	for (var key in group) {
		if (!changed[key]) continue;

		var newValue = newState[key];
		var oldValue = oldState[key];

		var callbacks = group[key];
		if (!callbacks) continue;

		for (var i = 0; i < callbacks.length; i += 1) {
			var callback = callbacks[i];
			if (callback.__calling) continue;

			callback.__calling = true;
			callback.call(component, newValue, oldValue);
			callback.__calling = false;
		}
	}
}

function fire(eventName, data) {
	var handlers =
		eventName in this._handlers && this._handlers[eventName].slice();
	if (!handlers) return;

	for (var i = 0; i < handlers.length; i += 1) {
		handlers[i].call(this, data);
	}
}

function get(key) {
	return key ? this._state[key] : this._state;
}

function init(component, options) {
	component._observers = { pre: blankObject(), post: blankObject() };
	component._handlers = blankObject();
	component._bind = options._bind;

	component.options = options;
	component.root = options.root || component;
	component.store = component.root.store || options.store;
}

function observe(key, callback, options) {
	var group = options && options.defer
		? this._observers.post
		: this._observers.pre;

	(group[key] || (group[key] = [])).push(callback);

	if (!options || options.init !== false) {
		callback.__calling = true;
		callback.call(this, this._state[key]);
		callback.__calling = false;
	}

	return {
		cancel: function() {
			var index = group[key].indexOf(callback);
			if (~index) group[key].splice(index, 1);
		}
	};
}

function on(eventName, handler) {
	if (eventName === 'teardown') return this.on('destroy', handler);

	var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
	handlers.push(handler);

	return {
		cancel: function() {
			var index = handlers.indexOf(handler);
			if (~index) handlers.splice(index, 1);
		}
	};
}

function set(newState) {
	this._set(assign({}, newState));
	if (this.root._lock) return;
	this.root._lock = true;
	callAll(this.root._beforecreate);
	callAll(this.root._oncreate);
	callAll(this.root._aftercreate);
	this.root._lock = false;
}

function _set(newState) {
	var oldState = this._state,
		changed = {},
		dirty = false;

	for (var key in newState) {
		if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
	}
	if (!dirty) return;

	this._state = assign({}, oldState, newState);
	this._recompute(changed, this._state);
	if (this._bind) this._bind(changed, this._state);

	if (this._fragment) {
		dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
		this._fragment.p(changed, this._state);
		dispatchObservers(this, this._observers.post, changed, this._state, oldState);
	}
}

function callAll(fns) {
	while (fns && fns.length) fns.shift()();
}

function _mount(target, anchor) {
	this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
}

function _unmount() {
	if (this._fragment) this._fragment.u();
}

var proto = {
	destroy: destroy,
	get: get,
	fire: fire,
	observe: observe,
	on: on,
	set: set,
	teardown: destroy,
	_recompute: noop,
	_set: _set,
	_mount: _mount,
	_unmount: _unmount,
	_differs: _differs
};

/* src/Sprite.html generated by Svelte v1.57.1 */

// We need to create a global cache of loaded images independent of any sprite instance.
const cache = new Map();

function realHeight(width, height) {
  return height ? height : width;
}

function data() {
  return {
    url: '',
    index: 0,
    width: 100,
    loaded: null,
    columns: Infinity,
    height: null,
    img: null
  }
}
var methods = {
  draw() {
    if (this.refs.canvas) {
      const context = this.refs.canvas.getContext('2d');
      const { img, index, width, realHeight, columns, loaded } = this.get();
      context.clearRect(0, 0, width, realHeight);
      const sx = Array.isArray(index) ? index[0] * width : (index % columns) * width;
      const sy = Array.isArray(index) ? index[1] * realHeight : Math.floor(index / columns) * realHeight;
      if (loaded) {
        context.drawImage(img, sx, sy, width, realHeight, 0, 0, width, realHeight);
      } else {
        context.fillStyle = '#ccc';
        context.fillRect(0, 0, width, realHeight);
        context.fillStyle = "#eee";
        context.textAlign = 'center';
        context.font = '16px sans-serif';
        context.fillText('...', width / 2, realHeight / 2);
      }
    }
  }
};

function oncreate() {
  const done = (e) => {
    this.set({loaded: true});
    const {img} = this.get();
    img.removeEventListener('loaded', done);
  };
  // TODO this redraws one too many times on when you change the index and url at the same time. 
  // could add the svelte extras dependency for 'observeMany', but not sure it's worth it.
  this.observe('index', index => {
    this.draw();
  }, { init: false });
  this.observe('img', index => {
    this.draw();
  }, { init: false });
  this.observe('loaded', loaded => {
    this.draw();
  }, { init: false });
  this.observe('url', url => {
    // Clear any pending events for old urls.
    const currentImg = this.get('img');
    if (currentImg) {currentImg.removeEventListener('load', done); }
    // Check if we've already seen this url in the global cache
    if (cache.has(url)) {
      const cached = cache.get(url);
      // If we've seen it, we need to check if we're currently loading it.
      if (cached.loaded) {
        // If it's loaded, just start using it!
        this.set({
          loaded: true,
          img: cached.img
        });
      } else {
        // If it's not loaded, we need to wait until the other request is done before we start drawing.
        this.set({
          loaded: false,
          img: cached.img
        });
        cached.img.addEventListener('load', done);
      }
    } else {
      // If we haven't seen the url yet, we need to load the image.
      const img = new Image();
      this.set({ 
        loaded: false,
        img: img
       });
      const data = {img};
      // We need this event to persist, so that we still know when an abandoned image is done loading.
      const finished = (e) => {
        data.loaded = true;
        img.removeEventListener('load', finished);
      };
      img.addEventListener('load', finished);
      img.addEventListener('load', done);
      cache.set(url, data);
      img.src = url;
    }
  });
}
function create_main_fragment(component, state) {
	var canvas;

	return {
		c: function create() {
			canvas = createElement("canvas");
			this.h();
		},

		h: function hydrate() {
			canvas.width = state.width;
			canvas.height = state.realHeight;
		},

		m: function mount(target, anchor) {
			insertNode(canvas, target, anchor);
			component.refs.canvas = canvas;
		},

		p: function update(changed, state) {
			if (changed.width) {
				canvas.width = state.width;
			}

			if (changed.realHeight) {
				canvas.height = state.realHeight;
			}
		},

		u: function unmount() {
			detachNode(canvas);
		},

		d: function destroy$$1() {
			if (component.refs.canvas === canvas) component.refs.canvas = null;
		}
	};
}

function Sprite(options) {
	init(this, options);
	this.refs = {};
	this._state = assign(data(), options.data);
	this._recompute({ width: 1, height: 1 }, this._state);

	var _oncreate = oncreate.bind(this);

	if (!options.root) {
		this._oncreate = [];
	}

	this._fragment = create_main_fragment(this, this._state);

	this.root._oncreate.push(_oncreate);

	if (options.target) {
		this._fragment.c();
		this._mount(options.target, options.anchor);

		callAll(this._oncreate);
	}
}

assign(Sprite.prototype, methods, proto);

Sprite.prototype._recompute = function _recompute(changed, state) {
	if (changed.width || changed.height) {
		if (this._differs(state.realHeight, (state.realHeight = realHeight(state.width, state.height)))) changed.realHeight = true;
	}
};

var EOL = {},
    EOF = {},
    QUOTE = 34,
    NEWLINE = 10,
    RETURN = 13;

function objectConverter(columns) {
  return new Function("d", "return {" + columns.map(function(name, i) {
    return JSON.stringify(name) + ": d[" + i + "]";
  }).join(",") + "}");
}

function customConverter(columns, f) {
  var object = objectConverter(columns);
  return function(row, i) {
    return f(object(row), i, columns);
  };
}

// Compute unique columns in order of discovery.
function inferColumns(rows) {
  var columnSet = Object.create(null),
      columns = [];

  rows.forEach(function(row) {
    for (var column in row) {
      if (!(column in columnSet)) {
        columns.push(columnSet[column] = column);
      }
    }
  });

  return columns;
}

function dsv(delimiter) {
  var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
      DELIMITER = delimiter.charCodeAt(0);

  function parse(text, f) {
    var convert, columns, rows = parseRows(text, function(row, i) {
      if (convert) return convert(row, i - 1);
      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
    });
    rows.columns = columns || [];
    return rows;
  }

  function parseRows(text, f) {
    var rows = [], // output rows
        N = text.length,
        I = 0, // current character index
        n = 0, // current line number
        t, // current token
        eof = N <= 0, // current token followed by EOF?
        eol = false; // current token followed by EOL?

    // Strip the trailing newline.
    if (text.charCodeAt(N - 1) === NEWLINE) --N;
    if (text.charCodeAt(N - 1) === RETURN) --N;

    function token() {
      if (eof) return EOF;
      if (eol) return eol = false, EOL;

      // Unescape quotes.
      var i, j = I, c;
      if (text.charCodeAt(j) === QUOTE) {
        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);
        if ((i = I) >= N) eof = true;
        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;
        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
        return text.slice(j + 1, i - 1).replace(/""/g, "\"");
      }

      // Find next delimiter or newline.
      while (I < N) {
        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;
        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
        else if (c !== DELIMITER) continue;
        return text.slice(j, i);
      }

      // Return last token before EOF.
      return eof = true, text.slice(j, N);
    }

    while ((t = token()) !== EOF) {
      var row = [];
      while (t !== EOL && t !== EOF) row.push(t), t = token();
      if (f && (row = f(row, n++)) == null) continue;
      rows.push(row);
    }

    return rows;
  }

  function format(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {
      return columns.map(function(column) {
        return formatValue(row[column]);
      }).join(delimiter);
    })).join("\n");
  }

  function formatRows(rows) {
    return rows.map(formatRow).join("\n");
  }

  function formatRow(row) {
    return row.map(formatValue).join(delimiter);
  }

  function formatValue(text) {
    return text == null ? ""
        : reFormat.test(text += "") ? "\"" + text.replace(/"/g, "\"\"") + "\""
        : text;
  }

  return {
    parse: parse,
    parseRows: parseRows,
    format: format,
    formatRows: formatRows
  };
}

var csv = dsv(",");

var csvParse = csv.parse;

var tsv = dsv("\t");

var tsvParse = tsv.parse;

// Copyright 2018 The Lucid Authors.All Rights Reserved.


// // Basic usage examples: 
// import {load} from 'lucid-components';
// 
// load("test.csv").then(response => console.log("1", response));
// load(["test.csv", "test.tsv"]).then(response => console.log("2", response[0], response[1]));
// load('3a.jpg').then(response => {this.refs.img.src = response.src;})
// 
// // You can also namespace requests, which will cancel previous requests
// load("test.csv", "namespace").then(response => console.log("This will never be called."))
// load("test.tsv", "namespace").then(response => console.log("This will interrupt the previous one and be resolved instead."))



// We will cache requests and parsing.
const cache$1 = new Map();
const suppress = new Map();
const namespaces = new Map();

// Mapping file extensions to loaders
const loaders = new Map([
  ['gif', image],
  ['png', image],
  ['jpeg', image],
  ['jpg', image],
  ['csv', csv$1],
  ['tsv', tsv$1],
  ['txt', text],
  ['text', text],
  ['json', json],
]);

// Loaders
function handleErrors(response) {
  if (response.ok) {
    return response;
  } else {
    throw new Error(response.status + ':' + response.statusText);
  }
}

function image(url) {
  return new Promise((resolve, reject) => {
    let img = new Image();
    img.onload = event => resolve(img);
    img.onerror = event => reject(event);
    img.src = url;
  })
}

function json(url) {
  return fetch(url).then(handleErrors).then(response => response.json())
}

function text(url) {
  return fetch(url).then(handleErrors).then(response => response.text());
}

function csv$1(url) {
  return text(url).then(text => Promise.resolve(csvParse(text)));
}

function tsv$1(url) {
  return text(url).then(text => Promise.resolve(tsvParse(text)));
}


// Load a url or an array of urls.
function load(url, namespace) {

  // We will to create a namespace if we don't have one.
  let ns = namespace != null ? namespace : Date.now() + "" + Math.random();

  // Create a unique ID for this request
  let requestID = "namespace:" + ns + ", url:" + url + ", random:" + Date.now() + "" + Math.random();
  suppress.set(requestID, false);

  // If we have a previous request in this namespace, mark it as suppressed so 
  // that the promise is never resolved. Then we reset the current namespace to 
  // the current request.
  if (namespaces.has(ns)) {
    const pendingRequestID = namespaces.get(ns);
    suppress.set(pendingRequestID, true);
  }
  namespaces.set(ns, requestID);
  
  return new Promise((resolve, reject) => {
    let p;
    if (Array.isArray(url)) {
      const promises = url.map(u => _loadURL(u));
      p = Promise.all(promises);
    } else {
      p =  _loadURL(url);
    }
    p
      .then(val => {
        //check to see if we've suppressed this request.
        if (!suppress.get(requestID)) {
          resolve(val);
        }
      })
      .catch(error => {
        //check to see if we've suppressed this request.
        if (!suppress.get(requestID)) {
          reject(error);
        }
      });
    
  });
}

// Private loading function
function _loadURL(url) {
  let id = url;
  if (cache$1.has(id)) {
    return cache$1.get(id);
  } else {
    let extension = parseFileExtensionFromURL(url, loaders);
    let loader = loaders.get(extension);
    let p = loader(url);
    cache$1.set(id, p);
    return p;
  }
}

// Helpers

// Returns a filetype extension from a given url string
function parseFileExtensionFromURL(url, loaders) {
  const parts = url.split(".");
  const ext = parts[parts.length - 1];
  if (!loaders.has(ext)) {
    console.warn('Trying to load url: ' + url + ' with an unknown filetype. Assuming "text".');
  }
  return loaders.has(ext) ? ext : 'text';
}

// Copyright 2018 The Lucid Authors.All Rights Reserved.

export { Sprite, load };
//# sourceMappingURL=index.js.map
